/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, Addr, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, BalanceResp, MinimalDonationResp} from "./Lottery.types";
export interface LotteryReadOnlyInterface {
  contractAddress: string;
  contractBalance: () => Promise<BalanceResp>;
  minimalDonation: () => Promise<MinimalDonationResp>;
}
export class LotteryQueryClient implements LotteryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.contractBalance = this.contractBalance.bind(this);
    this.minimalDonation = this.minimalDonation.bind(this);
  }

  contractBalance = async (): Promise<BalanceResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_balance: {}
    });
  };
  minimalDonation = async (): Promise<MinimalDonationResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minimal_donation: {}
    });
  };
}
export interface LotteryInterface extends LotteryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  donate: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pickWinner: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LotteryClient extends LotteryQueryClient implements LotteryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.donate = this.donate.bind(this);
    this.pickWinner = this.pickWinner.bind(this);
  }

  donate = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      donate: {}
    }, _fee, _memo, _funds);
  };
  pickWinner = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pick_winner: {}
    }, _fee, _memo, _funds);
  };
}