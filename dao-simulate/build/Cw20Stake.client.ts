/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Duration, Uint128, Binary, Action, OwnershipForAddr } from "./types";
import { ClaimsResponse, Config, GetHooksResponse, ListStakersResponse, StakedBalanceAtHeightResponse, StakedValueResponse, TotalStakedAtHeightResponse, TotalValueResponse } from "./Cw20Stake.types";
export interface Cw20StakeReadOnlyInterface {
    contractAddress: string;
    stakedBalanceAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<StakedBalanceAtHeightResponse>;
    totalStakedAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalStakedAtHeightResponse>;
    stakedValue: ({ address }: {
        address: string;
    }) => Promise<StakedValueResponse>;
    totalValue: () => Promise<TotalValueResponse>;
    getConfig: () => Promise<Config>;
    claims: ({ address }: {
        address: string;
    }) => Promise<ClaimsResponse>;
    getHooks: () => Promise<GetHooksResponse>;
    listStakers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListStakersResponse>;
    ownership: () => Promise<OwnershipForAddr>;
}
export declare class Cw20StakeQueryClient implements Cw20StakeReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    stakedBalanceAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<StakedBalanceAtHeightResponse>;
    totalStakedAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalStakedAtHeightResponse>;
    stakedValue: ({ address }: {
        address: string;
    }) => Promise<StakedValueResponse>;
    totalValue: () => Promise<TotalValueResponse>;
    getConfig: () => Promise<Config>;
    claims: ({ address }: {
        address: string;
    }) => Promise<ClaimsResponse>;
    getHooks: () => Promise<GetHooksResponse>;
    listStakers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListStakersResponse>;
    ownership: () => Promise<OwnershipForAddr>;
}
export interface Cw20StakeInterface extends Cw20StakeReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount }: {
        amount: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ duration }: {
        duration?: Duration;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateOwnership: (action: Action, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw20StakeClient extends Cw20StakeQueryClient implements Cw20StakeInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount }: {
        amount: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ duration }: {
        duration?: Duration;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateOwnership: (action: Action, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
