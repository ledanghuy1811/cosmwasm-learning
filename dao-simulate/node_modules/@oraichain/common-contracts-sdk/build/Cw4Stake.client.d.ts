/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Binary } from "./types";
import { AdminResponse, ClaimsResponse, HooksResponse, MemberListResponse, MemberResponse, StakedResponse, TotalWeightResponse } from "./Cw4Stake.types";
export interface Cw4StakeReadOnlyInterface {
    contractAddress: string;
    claims: ({ address }: {
        address: string;
    }) => Promise<ClaimsResponse>;
    staked: ({ address }: {
        address: string;
    }) => Promise<StakedResponse>;
    admin: () => Promise<AdminResponse>;
    totalWeight: () => Promise<TotalWeightResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
    member: ({ addr, atHeight }: {
        addr: string;
        atHeight?: number;
    }) => Promise<MemberResponse>;
    hooks: () => Promise<HooksResponse>;
}
export declare class Cw4StakeQueryClient implements Cw4StakeReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    claims: ({ address }: {
        address: string;
    }) => Promise<ClaimsResponse>;
    staked: ({ address }: {
        address: string;
    }) => Promise<StakedResponse>;
    admin: () => Promise<AdminResponse>;
    totalWeight: () => Promise<TotalWeightResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
    member: ({ addr, atHeight }: {
        addr: string;
        atHeight?: number;
    }) => Promise<MemberResponse>;
    hooks: () => Promise<HooksResponse>;
}
export interface Cw4StakeInterface extends Cw4StakeReadOnlyInterface {
    contractAddress: string;
    sender: string;
    bond: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unbond: ({ tokens }: {
        tokens: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin?: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw4StakeClient extends Cw4StakeQueryClient implements Cw4StakeInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    bond: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unbond: ({ tokens }: {
        tokens: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin?: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
