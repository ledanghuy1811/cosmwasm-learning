/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { CosmosMsgForEmpty, Expiration, Coin } from "./types";
import { Permissions, AdminListResponse, AllAllowancesResponse, AllPermissionsResponse, PermissionsInfo, Allowance, CanExecuteResponse } from "./Cw1Subkeys.types";
export interface Cw1SubkeysReadOnlyInterface {
    contractAddress: string;
    adminList: () => Promise<AdminListResponse>;
    allowance: ({ spender }: {
        spender: string;
    }) => Promise<Allowance>;
    permissions: ({ spender }: {
        spender: string;
    }) => Promise<PermissionsInfo>;
    canExecute: ({ msg, sender }: {
        msg: CosmosMsgForEmpty;
        sender: string;
    }) => Promise<CanExecuteResponse>;
    allAllowances: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allPermissions: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllPermissionsResponse>;
}
export declare class Cw1SubkeysQueryClient implements Cw1SubkeysReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    adminList: () => Promise<AdminListResponse>;
    allowance: ({ spender }: {
        spender: string;
    }) => Promise<Allowance>;
    permissions: ({ spender }: {
        spender: string;
    }) => Promise<PermissionsInfo>;
    canExecute: ({ msg, sender }: {
        msg: CosmosMsgForEmpty;
        sender: string;
    }) => Promise<CanExecuteResponse>;
    allAllowances: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allPermissions: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllPermissionsResponse>;
}
export interface Cw1SubkeysInterface extends Cw1SubkeysReadOnlyInterface {
    contractAddress: string;
    sender: string;
    execute: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    freeze: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmins: ({ admins }: {
        admins: string[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Coin;
        expires?: Expiration;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Coin;
        expires?: Expiration;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setPermissions: ({ permissions, spender }: {
        permissions: Permissions;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw1SubkeysClient extends Cw1SubkeysQueryClient implements Cw1SubkeysInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    execute: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    freeze: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmins: ({ admins }: {
        admins: string[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Coin;
        expires?: Expiration;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Coin;
        expires?: Expiration;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    setPermissions: ({ permissions, spender }: {
        permissions: Permissions;
        spender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
