"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CwIcs721BridgeClient = exports.CwIcs721BridgeQueryClient = void 0;
class CwIcs721BridgeQueryClient {
    constructor(client, contractAddress) {
        this.classId = async ({ contract }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                class_id: {
                    contract
                }
            });
        };
        this.nftContract = async ({ classId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                nft_contract: {
                    class_id: classId
                }
            });
        };
        this.classMetadata = async ({ classId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                class_metadata: {
                    class_id: classId
                }
            });
        };
        this.tokenMetadata = async ({ classId, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                token_metadata: {
                    class_id: classId,
                    token_id: tokenId
                }
            });
        };
        this.owner = async ({ classId, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                owner: {
                    class_id: classId,
                    token_id: tokenId
                }
            });
        };
        this.pauser = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                pauser: {}
            });
        };
        this.paused = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                paused: {}
            });
        };
        this.proxy = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                proxy: {}
            });
        };
        this.cw721CodeId = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                cw721_code_id: {}
            });
        };
        this.nftContracts = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                nft_contracts: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.outgoingChannels = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                outgoing_channels: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.incomingChannels = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                incoming_channels: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.classId = this.classId.bind(this);
        this.nftContract = this.nftContract.bind(this);
        this.classMetadata = this.classMetadata.bind(this);
        this.tokenMetadata = this.tokenMetadata.bind(this);
        this.owner = this.owner.bind(this);
        this.pauser = this.pauser.bind(this);
        this.paused = this.paused.bind(this);
        this.proxy = this.proxy.bind(this);
        this.cw721CodeId = this.cw721CodeId.bind(this);
        this.nftContracts = this.nftContracts.bind(this);
        this.outgoingChannels = this.outgoingChannels.bind(this);
        this.incomingChannels = this.incomingChannels.bind(this);
    }
}
exports.CwIcs721BridgeQueryClient = CwIcs721BridgeQueryClient;
class CwIcs721BridgeClient extends CwIcs721BridgeQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.receiveNft = async ({ msg, sender, tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                receive_nft: {
                    msg,
                    sender,
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.pause = async (_fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                pause: {}
            }, _fee, _memo, _funds);
        };
        this.callback = async (callbackMsg, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                callback: callbackMsg
            }, _fee, _memo, _funds);
        };
        this.receiveProxyNft = async ({ eyeball, msg }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                receive_proxy_nft: {
                    eyeball,
                    msg
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.receiveNft = this.receiveNft.bind(this);
        this.pause = this.pause.bind(this);
        this.callback = this.callback.bind(this);
        this.receiveProxyNft = this.receiveProxyNft.bind(this);
    }
}
exports.CwIcs721BridgeClient = CwIcs721BridgeClient;
//# sourceMappingURL=CwIcs721Bridge.client.js.map