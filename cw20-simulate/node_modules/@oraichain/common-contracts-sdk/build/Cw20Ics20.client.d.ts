/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Binary, Coin } from "./types";
import { AdminResponse, AllowedResponse, ChannelResponse, ConfigResponse, ListAllowedResponse, ListChannelsResponse, PortResponse } from "./Cw20Ics20.types";
export interface Cw20Ics20ReadOnlyInterface {
    contractAddress: string;
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListAllowedResponse>;
}
export declare class Cw20Ics20QueryClient implements Cw20Ics20ReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListAllowedResponse>;
}
export interface Cw20Ics20Interface extends Cw20Ics20ReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    transfer: ({ channel, memo, remoteAddress, timeout }: {
        channel: string;
        memo?: string;
        remoteAddress: string;
        timeout?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit }: {
        contract: string;
        gasLimit?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw20Ics20Client extends Cw20Ics20QueryClient implements Cw20Ics20Interface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    transfer: ({ channel, memo, remoteAddress, timeout }: {
        channel: string;
        memo?: string;
        remoteAddress: string;
        timeout?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit }: {
        contract: string;
        gasLimit?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
