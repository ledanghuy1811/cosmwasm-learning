"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw3FlexMultisigClient = exports.Cw3FlexMultisigQueryClient = void 0;
class Cw3FlexMultisigQueryClient {
    constructor(client, contractAddress) {
        this.threshold = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                threshold: {}
            });
        };
        this.proposal = async ({ proposalId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                proposal: {
                    proposal_id: proposalId
                }
            });
        };
        this.listProposals = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_proposals: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.reverseProposals = async ({ limit, startBefore }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                reverse_proposals: {
                    limit,
                    start_before: startBefore
                }
            });
        };
        this.getVote = async ({ proposalId, voter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                vote: {
                    proposal_id: proposalId,
                    voter
                }
            });
        };
        this.listVotes = async ({ limit, proposalId, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_votes: {
                    limit,
                    proposal_id: proposalId,
                    start_after: startAfter
                }
            });
        };
        this.voter = async ({ address }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                voter: {
                    address
                }
            });
        };
        this.listVoters = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_voters: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.config = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.threshold = this.threshold.bind(this);
        this.proposal = this.proposal.bind(this);
        this.listProposals = this.listProposals.bind(this);
        this.reverseProposals = this.reverseProposals.bind(this);
        this.getVote = this.getVote.bind(this);
        this.listVotes = this.listVotes.bind(this);
        this.voter = this.voter.bind(this);
        this.listVoters = this.listVoters.bind(this);
        this.config = this.config.bind(this);
    }
}
exports.Cw3FlexMultisigQueryClient = Cw3FlexMultisigQueryClient;
class Cw3FlexMultisigClient extends Cw3FlexMultisigQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.propose = async ({ description, latest, msgs, title }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                propose: {
                    description,
                    latest,
                    msgs,
                    title
                }
            }, _fee, _memo, _funds);
        };
        this.vote = async ({ proposalId, vote }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                vote: {
                    proposal_id: proposalId,
                    vote
                }
            }, _fee, _memo, _funds);
        };
        this.execute = async ({ proposalId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                execute: {
                    proposal_id: proposalId
                }
            }, _fee, _memo, _funds);
        };
        this.close = async ({ proposalId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                close: {
                    proposal_id: proposalId
                }
            }, _fee, _memo, _funds);
        };
        this.memberChangedHook = async ({ diffs }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                member_changed_hook: {
                    diffs
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.propose = this.propose.bind(this);
        this.vote = this.vote.bind(this);
        this.execute = this.execute.bind(this);
        this.close = this.close.bind(this);
        this.memberChangedHook = this.memberChangedHook.bind(this);
    }
}
exports.Cw3FlexMultisigClient = Cw3FlexMultisigClient;
//# sourceMappingURL=Cw3FlexMultisig.client.js.map