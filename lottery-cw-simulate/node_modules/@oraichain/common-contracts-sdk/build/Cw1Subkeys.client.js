"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw1SubkeysClient = exports.Cw1SubkeysQueryClient = void 0;
class Cw1SubkeysQueryClient {
    constructor(client, contractAddress) {
        this.adminList = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                admin_list: {}
            });
        };
        this.allowance = async ({ spender }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                allowance: {
                    spender
                }
            });
        };
        this.permissions = async ({ spender }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                permissions: {
                    spender
                }
            });
        };
        this.canExecute = async ({ msg, sender }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                can_execute: {
                    msg,
                    sender
                }
            });
        };
        this.allAllowances = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_allowances: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.allPermissions = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_permissions: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.adminList = this.adminList.bind(this);
        this.allowance = this.allowance.bind(this);
        this.permissions = this.permissions.bind(this);
        this.canExecute = this.canExecute.bind(this);
        this.allAllowances = this.allAllowances.bind(this);
        this.allPermissions = this.allPermissions.bind(this);
    }
}
exports.Cw1SubkeysQueryClient = Cw1SubkeysQueryClient;
class Cw1SubkeysClient extends Cw1SubkeysQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.execute = async ({ msgs }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                execute: {
                    msgs
                }
            }, _fee, _memo, _funds);
        };
        this.freeze = async (_fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                freeze: {}
            }, _fee, _memo, _funds);
        };
        this.updateAdmins = async ({ admins }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_admins: {
                    admins
                }
            }, _fee, _memo, _funds);
        };
        this.increaseAllowance = async ({ amount, expires, spender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                increase_allowance: {
                    amount,
                    expires,
                    spender
                }
            }, _fee, _memo, _funds);
        };
        this.decreaseAllowance = async ({ amount, expires, spender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                decrease_allowance: {
                    amount,
                    expires,
                    spender
                }
            }, _fee, _memo, _funds);
        };
        this.setPermissions = async ({ permissions, spender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                set_permissions: {
                    permissions,
                    spender
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.execute = this.execute.bind(this);
        this.freeze = this.freeze.bind(this);
        this.updateAdmins = this.updateAdmins.bind(this);
        this.increaseAllowance = this.increaseAllowance.bind(this);
        this.decreaseAllowance = this.decreaseAllowance.bind(this);
        this.setPermissions = this.setPermissions.bind(this);
    }
}
exports.Cw1SubkeysClient = Cw1SubkeysClient;
//# sourceMappingURL=Cw1Subkeys.client.js.map