"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw20BaseClient = exports.Cw20BaseQueryClient = void 0;
class Cw20BaseQueryClient {
    constructor(client, contractAddress) {
        this.balance = async ({ address }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                balance: {
                    address
                }
            });
        };
        this.tokenInfo = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                token_info: {}
            });
        };
        this.minter = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                minter: {}
            });
        };
        this.allowance = async ({ owner, spender }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                allowance: {
                    owner,
                    spender
                }
            });
        };
        this.allAllowances = async ({ limit, owner, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_allowances: {
                    limit,
                    owner,
                    start_after: startAfter
                }
            });
        };
        this.allSpenderAllowances = async ({ limit, spender, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_spender_allowances: {
                    limit,
                    spender,
                    start_after: startAfter
                }
            });
        };
        this.allAccounts = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_accounts: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.marketingInfo = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                marketing_info: {}
            });
        };
        this.downloadLogo = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                download_logo: {}
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.balance = this.balance.bind(this);
        this.tokenInfo = this.tokenInfo.bind(this);
        this.minter = this.minter.bind(this);
        this.allowance = this.allowance.bind(this);
        this.allAllowances = this.allAllowances.bind(this);
        this.allSpenderAllowances = this.allSpenderAllowances.bind(this);
        this.allAccounts = this.allAccounts.bind(this);
        this.marketingInfo = this.marketingInfo.bind(this);
        this.downloadLogo = this.downloadLogo.bind(this);
    }
}
exports.Cw20BaseQueryClient = Cw20BaseQueryClient;
class Cw20BaseClient extends Cw20BaseQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.transfer = async ({ amount, recipient }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                transfer: {
                    amount,
                    recipient
                }
            }, _fee, _memo, _funds);
        };
        this.burn = async ({ amount }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                burn: {
                    amount
                }
            }, _fee, _memo, _funds);
        };
        this.send = async ({ amount, contract, msg }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                send: {
                    amount,
                    contract,
                    msg
                }
            }, _fee, _memo, _funds);
        };
        this.increaseAllowance = async ({ amount, expires, spender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                increase_allowance: {
                    amount,
                    expires,
                    spender
                }
            }, _fee, _memo, _funds);
        };
        this.decreaseAllowance = async ({ amount, expires, spender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                decrease_allowance: {
                    amount,
                    expires,
                    spender
                }
            }, _fee, _memo, _funds);
        };
        this.transferFrom = async ({ amount, owner, recipient }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                transfer_from: {
                    amount,
                    owner,
                    recipient
                }
            }, _fee, _memo, _funds);
        };
        this.sendFrom = async ({ amount, contract, msg, owner }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                send_from: {
                    amount,
                    contract,
                    msg,
                    owner
                }
            }, _fee, _memo, _funds);
        };
        this.burnFrom = async ({ amount, owner }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                burn_from: {
                    amount,
                    owner
                }
            }, _fee, _memo, _funds);
        };
        this.mint = async ({ amount, recipient }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                mint: {
                    amount,
                    recipient
                }
            }, _fee, _memo, _funds);
        };
        this.updateMinter = async ({ newMinter }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_minter: {
                    new_minter: newMinter
                }
            }, _fee, _memo, _funds);
        };
        this.updateMarketing = async ({ description, marketing, project }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_marketing: {
                    description,
                    marketing,
                    project
                }
            }, _fee, _memo, _funds);
        };
        this.uploadLogo = async (logo, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                upload_logo: logo
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.transfer = this.transfer.bind(this);
        this.burn = this.burn.bind(this);
        this.send = this.send.bind(this);
        this.increaseAllowance = this.increaseAllowance.bind(this);
        this.decreaseAllowance = this.decreaseAllowance.bind(this);
        this.transferFrom = this.transferFrom.bind(this);
        this.sendFrom = this.sendFrom.bind(this);
        this.burnFrom = this.burnFrom.bind(this);
        this.mint = this.mint.bind(this);
        this.updateMinter = this.updateMinter.bind(this);
        this.updateMarketing = this.updateMarketing.bind(this);
        this.uploadLogo = this.uploadLogo.bind(this);
    }
}
exports.Cw20BaseClient = Cw20BaseClient;
//# sourceMappingURL=Cw20Base.client.js.map