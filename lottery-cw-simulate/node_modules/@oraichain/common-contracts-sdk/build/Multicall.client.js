"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MulticallQueryClient = void 0;
class MulticallQueryClient {
    constructor(client, contractAddress) {
        this.contractVersion = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                contract_version: {}
            });
        };
        this.aggregate = async ({ queries }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                aggregate: {
                    queries
                }
            });
        };
        this.tryAggregate = async ({ includeCause, queries, requireSuccess }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                try_aggregate: {
                    include_cause: includeCause,
                    queries,
                    require_success: requireSuccess
                }
            });
        };
        this.tryAggregateOptional = async ({ includeCause, queries }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                try_aggregate_optional: {
                    include_cause: includeCause,
                    queries
                }
            });
        };
        this.blockAggregate = async ({ queries }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                block_aggregate: {
                    queries
                }
            });
        };
        this.blockTryAggregate = async ({ includeCause, queries, requireSuccess }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                block_try_aggregate: {
                    include_cause: includeCause,
                    queries,
                    require_success: requireSuccess
                }
            });
        };
        this.blockTryAggregateOptional = async ({ includeCause, queries }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                block_try_aggregate_optional: {
                    include_cause: includeCause,
                    queries
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.contractVersion = this.contractVersion.bind(this);
        this.aggregate = this.aggregate.bind(this);
        this.tryAggregate = this.tryAggregate.bind(this);
        this.tryAggregateOptional = this.tryAggregateOptional.bind(this);
        this.blockAggregate = this.blockAggregate.bind(this);
        this.blockTryAggregate = this.blockTryAggregate.bind(this);
        this.blockTryAggregateOptional = this.blockTryAggregateOptional.bind(this);
    }
}
exports.MulticallQueryClient = MulticallQueryClient;
//# sourceMappingURL=Multicall.client.js.map