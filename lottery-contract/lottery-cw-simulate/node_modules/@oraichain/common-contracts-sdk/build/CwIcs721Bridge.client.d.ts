/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Binary, Coin, Uint64 } from "./types";
import { CallbackMsg, ClassId, Cw721ReceiveMsg, ClassToken, NullableClassId, NullableClass, ArrayOfTupleOfTupleOfClassIdAndTokenIdAndString, NullableAddr, ArrayOfTupleOfClassIdAndAddr, OwnerOfResponse, Boolean, NullableToken } from "./CwIcs721Bridge.types";
export interface CwIcs721BridgeReadOnlyInterface {
    contractAddress: string;
    classId: ({ contract }: {
        contract: string;
    }) => Promise<NullableClassId>;
    nftContract: ({ classId }: {
        classId: string;
    }) => Promise<NullableAddr>;
    classMetadata: ({ classId }: {
        classId: string;
    }) => Promise<NullableClass>;
    tokenMetadata: ({ classId, tokenId }: {
        classId: string;
        tokenId: string;
    }) => Promise<NullableToken>;
    owner: ({ classId, tokenId }: {
        classId: string;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    pauser: () => Promise<NullableAddr>;
    paused: () => Promise<Boolean>;
    proxy: () => Promise<NullableAddr>;
    cw721CodeId: () => Promise<Uint64>;
    nftContracts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassId;
    }) => Promise<ArrayOfTupleOfClassIdAndAddr>;
    outgoingChannels: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassToken;
    }) => Promise<ArrayOfTupleOfTupleOfClassIdAndTokenIdAndString>;
    incomingChannels: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassToken;
    }) => Promise<ArrayOfTupleOfTupleOfClassIdAndTokenIdAndString>;
}
export declare class CwIcs721BridgeQueryClient implements CwIcs721BridgeReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    classId: ({ contract }: {
        contract: string;
    }) => Promise<NullableClassId>;
    nftContract: ({ classId }: {
        classId: string;
    }) => Promise<NullableAddr>;
    classMetadata: ({ classId }: {
        classId: string;
    }) => Promise<NullableClass>;
    tokenMetadata: ({ classId, tokenId }: {
        classId: string;
        tokenId: string;
    }) => Promise<NullableToken>;
    owner: ({ classId, tokenId }: {
        classId: string;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    pauser: () => Promise<NullableAddr>;
    paused: () => Promise<Boolean>;
    proxy: () => Promise<NullableAddr>;
    cw721CodeId: () => Promise<Uint64>;
    nftContracts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassId;
    }) => Promise<ArrayOfTupleOfClassIdAndAddr>;
    outgoingChannels: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassToken;
    }) => Promise<ArrayOfTupleOfTupleOfClassIdAndTokenIdAndString>;
    incomingChannels: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: ClassToken;
    }) => Promise<ArrayOfTupleOfTupleOfClassIdAndTokenIdAndString>;
}
export interface CwIcs721BridgeInterface extends CwIcs721BridgeReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    pause: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    callback: (callbackMsg: CallbackMsg, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receiveProxyNft: ({ eyeball, msg }: {
        eyeball: string;
        msg: Cw721ReceiveMsg;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CwIcs721BridgeClient extends CwIcs721BridgeQueryClient implements CwIcs721BridgeInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    pause: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    callback: (callbackMsg: CallbackMsg, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    receiveProxyNft: ({ eyeball, msg }: {
        eyeball: string;
        msg: Cw721ReceiveMsg;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
