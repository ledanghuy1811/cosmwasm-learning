"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw4StakeClient = exports.Cw4StakeQueryClient = void 0;
class Cw4StakeQueryClient {
    constructor(client, contractAddress) {
        this.claims = async ({ address }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                claims: {
                    address
                }
            });
        };
        this.staked = async ({ address }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                staked: {
                    address
                }
            });
        };
        this.admin = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                admin: {}
            });
        };
        this.totalWeight = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                total_weight: {}
            });
        };
        this.listMembers = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_members: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.member = async ({ addr, atHeight }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                member: {
                    addr,
                    at_height: atHeight
                }
            });
        };
        this.hooks = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                hooks: {}
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.claims = this.claims.bind(this);
        this.staked = this.staked.bind(this);
        this.admin = this.admin.bind(this);
        this.totalWeight = this.totalWeight.bind(this);
        this.listMembers = this.listMembers.bind(this);
        this.member = this.member.bind(this);
        this.hooks = this.hooks.bind(this);
    }
}
exports.Cw4StakeQueryClient = Cw4StakeQueryClient;
class Cw4StakeClient extends Cw4StakeQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.bond = async (_fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                bond: {}
            }, _fee, _memo, _funds);
        };
        this.unbond = async ({ tokens }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                unbond: {
                    tokens
                }
            }, _fee, _memo, _funds);
        };
        this.claim = async (_fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                claim: {}
            }, _fee, _memo, _funds);
        };
        this.updateAdmin = async ({ admin }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_admin: {
                    admin
                }
            }, _fee, _memo, _funds);
        };
        this.addHook = async ({ addr }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                add_hook: {
                    addr
                }
            }, _fee, _memo, _funds);
        };
        this.removeHook = async ({ addr }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                remove_hook: {
                    addr
                }
            }, _fee, _memo, _funds);
        };
        this.receive = async ({ amount, msg, sender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                receive: {
                    amount,
                    msg,
                    sender
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.bond = this.bond.bind(this);
        this.unbond = this.unbond.bind(this);
        this.claim = this.claim.bind(this);
        this.updateAdmin = this.updateAdmin.bind(this);
        this.addHook = this.addHook.bind(this);
        this.removeHook = this.removeHook.bind(this);
        this.receive = this.receive.bind(this);
    }
}
exports.Cw4StakeClient = Cw4StakeClient;
//# sourceMappingURL=Cw4Stake.client.js.map