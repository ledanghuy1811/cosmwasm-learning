/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Expiration, CosmosMsgForEmpty, Vote, Coin } from "./types";
import { ThresholdResponse, ProposalListResponseForEmpty, ProposalResponseForEmpty, VoterListResponse, VoteListResponse, VoteResponse, VoterResponse } from "./Cw3FixedMultisig.types";
export interface Cw3FixedMultisigReadOnlyInterface {
    contractAddress: string;
    threshold: () => Promise<ThresholdResponse>;
    proposal: ({ proposalId }: {
        proposalId: number;
    }) => Promise<ProposalResponseForEmpty>;
    listProposals: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: number;
    }) => Promise<ProposalListResponseForEmpty>;
    reverseProposals: ({ limit, startBefore }: {
        limit?: number;
        startBefore?: number;
    }) => Promise<ProposalListResponseForEmpty>;
    getVote: ({ proposalId, voter }: {
        proposalId: number;
        voter: string;
    }) => Promise<VoteResponse>;
    listVotes: ({ limit, proposalId, startAfter }: {
        limit?: number;
        proposalId: number;
        startAfter?: string;
    }) => Promise<VoteListResponse>;
    voter: ({ address }: {
        address: string;
    }) => Promise<VoterResponse>;
    listVoters: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<VoterListResponse>;
}
export declare class Cw3FixedMultisigQueryClient implements Cw3FixedMultisigReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    threshold: () => Promise<ThresholdResponse>;
    proposal: ({ proposalId }: {
        proposalId: number;
    }) => Promise<ProposalResponseForEmpty>;
    listProposals: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: number;
    }) => Promise<ProposalListResponseForEmpty>;
    reverseProposals: ({ limit, startBefore }: {
        limit?: number;
        startBefore?: number;
    }) => Promise<ProposalListResponseForEmpty>;
    getVote: ({ proposalId, voter }: {
        proposalId: number;
        voter: string;
    }) => Promise<VoteResponse>;
    listVotes: ({ limit, proposalId, startAfter }: {
        limit?: number;
        proposalId: number;
        startAfter?: string;
    }) => Promise<VoteListResponse>;
    voter: ({ address }: {
        address: string;
    }) => Promise<VoterResponse>;
    listVoters: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<VoterListResponse>;
}
export interface Cw3FixedMultisigInterface extends Cw3FixedMultisigReadOnlyInterface {
    contractAddress: string;
    sender: string;
    propose: ({ description, latest, msgs, title }: {
        description: string;
        latest?: Expiration;
        msgs: CosmosMsgForEmpty[];
        title: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: Vote;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ proposalId }: {
        proposalId: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    close: ({ proposalId }: {
        proposalId: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw3FixedMultisigClient extends Cw3FixedMultisigQueryClient implements Cw3FixedMultisigInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    propose: ({ description, latest, msgs, title }: {
        description: string;
        latest?: Expiration;
        msgs: CosmosMsgForEmpty[];
        title: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: Vote;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ proposalId }: {
        proposalId: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    close: ({ proposalId }: {
        proposalId: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
