/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Call, CallOptional, AggregateResult, BlockAggregateResult, ContractVersion } from "./Multicall.types";
export interface MulticallReadOnlyInterface {
    contractAddress: string;
    contractVersion: () => Promise<ContractVersion>;
    aggregate: ({ queries }: {
        queries: Call[];
    }) => Promise<AggregateResult>;
    tryAggregate: ({ includeCause, queries, requireSuccess }: {
        includeCause?: boolean;
        queries: Call[];
        requireSuccess?: boolean;
    }) => Promise<AggregateResult>;
    tryAggregateOptional: ({ includeCause, queries }: {
        includeCause?: boolean;
        queries: CallOptional[];
    }) => Promise<AggregateResult>;
    blockAggregate: ({ queries }: {
        queries: Call[];
    }) => Promise<BlockAggregateResult>;
    blockTryAggregate: ({ includeCause, queries, requireSuccess }: {
        includeCause?: boolean;
        queries: Call[];
        requireSuccess?: boolean;
    }) => Promise<BlockAggregateResult>;
    blockTryAggregateOptional: ({ includeCause, queries }: {
        includeCause?: boolean;
        queries: CallOptional[];
    }) => Promise<BlockAggregateResult>;
}
export declare class MulticallQueryClient implements MulticallReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    contractVersion: () => Promise<ContractVersion>;
    aggregate: ({ queries }: {
        queries: Call[];
    }) => Promise<AggregateResult>;
    tryAggregate: ({ includeCause, queries, requireSuccess }: {
        includeCause?: boolean;
        queries: Call[];
        requireSuccess?: boolean;
    }) => Promise<AggregateResult>;
    tryAggregateOptional: ({ includeCause, queries }: {
        includeCause?: boolean;
        queries: CallOptional[];
    }) => Promise<AggregateResult>;
    blockAggregate: ({ queries }: {
        queries: Call[];
    }) => Promise<BlockAggregateResult>;
    blockTryAggregate: ({ includeCause, queries, requireSuccess }: {
        includeCause?: boolean;
        queries: Call[];
        requireSuccess?: boolean;
    }) => Promise<BlockAggregateResult>;
    blockTryAggregateOptional: ({ includeCause, queries }: {
        includeCause?: boolean;
        queries: CallOptional[];
    }) => Promise<BlockAggregateResult>;
}
