"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CwIcs20LatestClient = exports.CwIcs20LatestQueryClient = void 0;
class CwIcs20LatestQueryClient {
    constructor(client, contractAddress) {
        this.port = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                port: {}
            });
        };
        this.listChannels = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_channels: {}
            });
        };
        this.channel = async ({ id }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                channel: {
                    id
                }
            });
        };
        this.channelWithKey = async ({ channelId, denom }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                channel_with_key: {
                    channel_id: channelId,
                    denom
                }
            });
        };
        this.config = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        };
        this.admin = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                admin: {}
            });
        };
        this.allowed = async ({ contract }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                allowed: {
                    contract
                }
            });
        };
        this.listAllowed = async ({ limit, order, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                list_allowed: {
                    limit,
                    order,
                    start_after: startAfter
                }
            });
        };
        this.pairMappings = async ({ limit, order, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                pair_mappings: {
                    limit,
                    order,
                    start_after: startAfter
                }
            });
        };
        this.pairMapping = async ({ key }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                pair_mapping: {
                    key
                }
            });
        };
        this.pairMappingsFromAssetInfo = async ({ assetInfo }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                pair_mappings_from_asset_info: {
                    asset_info: assetInfo
                }
            });
        };
        this.getTransferTokenFee = async ({ remoteTokenDenom }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_transfer_token_fee: {
                    remote_token_denom: remoteTokenDenom
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.port = this.port.bind(this);
        this.listChannels = this.listChannels.bind(this);
        this.channel = this.channel.bind(this);
        this.channelWithKey = this.channelWithKey.bind(this);
        this.config = this.config.bind(this);
        this.admin = this.admin.bind(this);
        this.allowed = this.allowed.bind(this);
        this.listAllowed = this.listAllowed.bind(this);
        this.pairMappings = this.pairMappings.bind(this);
        this.pairMapping = this.pairMapping.bind(this);
        this.pairMappingsFromAssetInfo = this.pairMappingsFromAssetInfo.bind(this);
        this.getTransferTokenFee = this.getTransferTokenFee.bind(this);
    }
}
exports.CwIcs20LatestQueryClient = CwIcs20LatestQueryClient;
class CwIcs20LatestClient extends CwIcs20LatestQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.receive = async ({ amount, msg, sender }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                receive: {
                    amount,
                    msg,
                    sender
                }
            }, _fee, _memo, _funds);
        };
        this.transferToRemote = async ({ localChannelId, memo, remoteAddress, remoteDenom, timeout }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                transfer_to_remote: {
                    local_channel_id: localChannelId,
                    memo,
                    remote_address: remoteAddress,
                    remote_denom: remoteDenom,
                    timeout
                }
            }, _fee, _memo, _funds);
        };
        this.updateMappingPair = async ({ denom, localAssetInfo, localAssetInfoDecimals, localChannelId, remoteDecimals }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_mapping_pair: {
                    denom,
                    local_asset_info: localAssetInfo,
                    local_asset_info_decimals: localAssetInfoDecimals,
                    local_channel_id: localChannelId,
                    remote_decimals: remoteDecimals
                }
            }, _fee, _memo, _funds);
        };
        this.deleteMappingPair = async ({ denom, localChannelId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                delete_mapping_pair: {
                    denom,
                    local_channel_id: localChannelId
                }
            }, _fee, _memo, _funds);
        };
        this.allow = async ({ contract, gasLimit }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                allow: {
                    contract,
                    gas_limit: gasLimit
                }
            }, _fee, _memo, _funds);
        };
        this.updateConfig = async ({ admin, defaultGasLimit, defaultTimeout, feeDenom, feeReceiver, relayerFee, relayerFeeReceiver, swapRouterContract, tokenFee }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_config: {
                    admin,
                    default_gas_limit: defaultGasLimit,
                    default_timeout: defaultTimeout,
                    fee_denom: feeDenom,
                    fee_receiver: feeReceiver,
                    relayer_fee: relayerFee,
                    relayer_fee_receiver: relayerFeeReceiver,
                    swap_router_contract: swapRouterContract,
                    token_fee: tokenFee
                }
            }, _fee, _memo, _funds);
        };
        this.increaseChannelBalanceIbcReceive = async ({ amount, destChannelId, ibcDenom, localReceiver }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                increase_channel_balance_ibc_receive: {
                    amount,
                    dest_channel_id: destChannelId,
                    ibc_denom: ibcDenom,
                    local_receiver: localReceiver
                }
            }, _fee, _memo, _funds);
        };
        this.reduceChannelBalanceIbcReceive = async ({ amount, ibcDenom, localReceiver, srcChannelId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                reduce_channel_balance_ibc_receive: {
                    amount,
                    ibc_denom: ibcDenom,
                    local_receiver: localReceiver,
                    src_channel_id: srcChannelId
                }
            }, _fee, _memo, _funds);
        };
        this.overrideChannelBalance = async ({ channelId, ibcDenom, outstanding, totalSent }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                override_channel_balance: {
                    channel_id: channelId,
                    ibc_denom: ibcDenom,
                    outstanding,
                    total_sent: totalSent
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.receive = this.receive.bind(this);
        this.transferToRemote = this.transferToRemote.bind(this);
        this.updateMappingPair = this.updateMappingPair.bind(this);
        this.deleteMappingPair = this.deleteMappingPair.bind(this);
        this.allow = this.allow.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
        this.increaseChannelBalanceIbcReceive = this.increaseChannelBalanceIbcReceive.bind(this);
        this.reduceChannelBalanceIbcReceive = this.reduceChannelBalanceIbcReceive.bind(this);
        this.overrideChannelBalance = this.overrideChannelBalance.bind(this);
    }
}
exports.CwIcs20LatestClient = CwIcs20LatestClient;
//# sourceMappingURL=CwIcs20Latest.client.js.map