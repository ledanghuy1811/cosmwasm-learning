/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Binary, Addr, Coin } from "./types";
import { AssetInfo, RelayerFee, TokenFee, Ratio, AdminResponse, AllowedResponse, ChannelResponse, ChannelWithKeyResponse, ConfigResponse, ListAllowedResponse, ListChannelsResponse, PairQuery, ArrayOfPairQuery, PortResponse } from "./CwIcs20Latest.types";
export interface CwIcs20LatestReadOnlyInterface {
    contractAddress: string;
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    channelWithKey: ({ channelId, denom }: {
        channelId: string;
        denom: string;
    }) => Promise<ChannelWithKeyResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, order, startAfter }: {
        limit?: number;
        order?: number;
        startAfter?: string;
    }) => Promise<ListAllowedResponse>;
    pairMappings: ({ limit, order, startAfter }: {
        limit?: number;
        order?: number;
        startAfter?: string;
    }) => Promise<Addr>;
    pairMapping: ({ key }: {
        key: string;
    }) => Promise<PairQuery>;
    pairMappingsFromAssetInfo: ({ assetInfo }: {
        assetInfo: AssetInfo;
    }) => Promise<ArrayOfPairQuery>;
    getTransferTokenFee: ({ remoteTokenDenom }: {
        remoteTokenDenom: string;
    }) => Promise<Ratio>;
}
export declare class CwIcs20LatestQueryClient implements CwIcs20LatestReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    channelWithKey: ({ channelId, denom }: {
        channelId: string;
        denom: string;
    }) => Promise<ChannelWithKeyResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, order, startAfter }: {
        limit?: number;
        order?: number;
        startAfter?: string;
    }) => Promise<ListAllowedResponse>;
    pairMappings: ({ limit, order, startAfter }: {
        limit?: number;
        order?: number;
        startAfter?: string;
    }) => Promise<Addr>;
    pairMapping: ({ key }: {
        key: string;
    }) => Promise<PairQuery>;
    pairMappingsFromAssetInfo: ({ assetInfo }: {
        assetInfo: AssetInfo;
    }) => Promise<ArrayOfPairQuery>;
    getTransferTokenFee: ({ remoteTokenDenom }: {
        remoteTokenDenom: string;
    }) => Promise<Ratio>;
}
export interface CwIcs20LatestInterface extends CwIcs20LatestReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    transferToRemote: ({ localChannelId, memo, remoteAddress, remoteDenom, timeout }: {
        localChannelId: string;
        memo?: string;
        remoteAddress: string;
        remoteDenom: string;
        timeout?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateMappingPair: ({ denom, localAssetInfo, localAssetInfoDecimals, localChannelId, remoteDecimals }: {
        denom: string;
        localAssetInfo: AssetInfo;
        localAssetInfoDecimals: number;
        localChannelId: string;
        remoteDecimals: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    deleteMappingPair: ({ denom, localChannelId }: {
        denom: string;
        localChannelId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit }: {
        contract: string;
        gasLimit?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, defaultGasLimit, defaultTimeout, feeDenom, feeReceiver, relayerFee, relayerFeeReceiver, swapRouterContract, tokenFee }: {
        admin?: string;
        defaultGasLimit?: number;
        defaultTimeout?: number;
        feeDenom?: string;
        feeReceiver?: string;
        relayerFee?: RelayerFee[];
        relayerFeeReceiver?: string;
        swapRouterContract?: string;
        tokenFee?: TokenFee[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    increaseChannelBalanceIbcReceive: ({ amount, destChannelId, ibcDenom, localReceiver }: {
        amount: Uint128;
        destChannelId: string;
        ibcDenom: string;
        localReceiver: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    reduceChannelBalanceIbcReceive: ({ amount, ibcDenom, localReceiver, srcChannelId }: {
        amount: Uint128;
        ibcDenom: string;
        localReceiver: string;
        srcChannelId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    overrideChannelBalance: ({ channelId, ibcDenom, outstanding, totalSent }: {
        channelId: string;
        ibcDenom: string;
        outstanding: Uint128;
        totalSent?: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CwIcs20LatestClient extends CwIcs20LatestQueryClient implements CwIcs20LatestInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    transferToRemote: ({ localChannelId, memo, remoteAddress, remoteDenom, timeout }: {
        localChannelId: string;
        memo?: string;
        remoteAddress: string;
        remoteDenom: string;
        timeout?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateMappingPair: ({ denom, localAssetInfo, localAssetInfoDecimals, localChannelId, remoteDecimals }: {
        denom: string;
        localAssetInfo: AssetInfo;
        localAssetInfoDecimals: number;
        localChannelId: string;
        remoteDecimals: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    deleteMappingPair: ({ denom, localChannelId }: {
        denom: string;
        localChannelId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit }: {
        contract: string;
        gasLimit?: number;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, defaultGasLimit, defaultTimeout, feeDenom, feeReceiver, relayerFee, relayerFeeReceiver, swapRouterContract, tokenFee }: {
        admin?: string;
        defaultGasLimit?: number;
        defaultTimeout?: number;
        feeDenom?: string;
        feeReceiver?: string;
        relayerFee?: RelayerFee[];
        relayerFeeReceiver?: string;
        swapRouterContract?: string;
        tokenFee?: TokenFee[];
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    increaseChannelBalanceIbcReceive: ({ amount, destChannelId, ibcDenom, localReceiver }: {
        amount: Uint128;
        destChannelId: string;
        ibcDenom: string;
        localReceiver: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    reduceChannelBalanceIbcReceive: ({ amount, ibcDenom, localReceiver, srcChannelId }: {
        amount: Uint128;
        ibcDenom: string;
        localReceiver: string;
        srcChannelId: string;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    overrideChannelBalance: ({ channelId, ibcDenom, outstanding, totalSent }: {
        channelId: string;
        ibcDenom: string;
        outstanding: Uint128;
        totalSent?: Uint128;
    }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
