"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw721BaseClient = exports.Cw721BaseQueryClient = void 0;
class Cw721BaseQueryClient {
    constructor(client, contractAddress) {
        this.ownerOf = async ({ includeExpired, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                owner_of: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        };
        this.approval = async ({ includeExpired, spender, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                approval: {
                    include_expired: includeExpired,
                    spender,
                    token_id: tokenId
                }
            });
        };
        this.approvals = async ({ includeExpired, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                approvals: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        };
        this.operator = async ({ includeExpired, operator, owner }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                operator: {
                    include_expired: includeExpired,
                    operator,
                    owner
                }
            });
        };
        this.allOperators = async ({ includeExpired, limit, owner, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_operators: {
                    include_expired: includeExpired,
                    limit,
                    owner,
                    start_after: startAfter
                }
            });
        };
        this.numTokens = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                num_tokens: {}
            });
        };
        this.contractInfo = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                contract_info: {}
            });
        };
        this.nftInfo = async ({ tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                nft_info: {
                    token_id: tokenId
                }
            });
        };
        this.allNftInfo = async ({ includeExpired, tokenId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_nft_info: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        };
        this.tokens = async ({ limit, owner, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                tokens: {
                    limit,
                    owner,
                    start_after: startAfter
                }
            });
        };
        this.allTokens = async ({ limit, startAfter }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_tokens: {
                    limit,
                    start_after: startAfter
                }
            });
        };
        this.minter = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                minter: {}
            });
        };
        this.getExtension = async ({ msg }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                extension: {
                    msg
                }
            });
        };
        this.ownership = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                ownership: {}
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.ownerOf = this.ownerOf.bind(this);
        this.approval = this.approval.bind(this);
        this.approvals = this.approvals.bind(this);
        this.operator = this.operator.bind(this);
        this.allOperators = this.allOperators.bind(this);
        this.numTokens = this.numTokens.bind(this);
        this.contractInfo = this.contractInfo.bind(this);
        this.nftInfo = this.nftInfo.bind(this);
        this.allNftInfo = this.allNftInfo.bind(this);
        this.tokens = this.tokens.bind(this);
        this.allTokens = this.allTokens.bind(this);
        this.minter = this.minter.bind(this);
        this.getExtension = this.getExtension.bind(this);
        this.ownership = this.ownership.bind(this);
    }
}
exports.Cw721BaseQueryClient = Cw721BaseQueryClient;
class Cw721BaseClient extends Cw721BaseQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.transferNft = async ({ recipient, tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                transfer_nft: {
                    recipient,
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.sendNft = async ({ contract, msg, tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                send_nft: {
                    contract,
                    msg,
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.approve = async ({ expires, spender, tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                approve: {
                    expires,
                    spender,
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.revoke = async ({ spender, tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                revoke: {
                    spender,
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.approveAll = async ({ expires, operator }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                approve_all: {
                    expires,
                    operator
                }
            }, _fee, _memo, _funds);
        };
        this.revokeAll = async ({ operator }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                revoke_all: {
                    operator
                }
            }, _fee, _memo, _funds);
        };
        this.mint = async ({ extension, owner, tokenId, tokenUri }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                mint: {
                    extension,
                    owner,
                    token_id: tokenId,
                    token_uri: tokenUri
                }
            }, _fee, _memo, _funds);
        };
        this.burn = async ({ tokenId }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                burn: {
                    token_id: tokenId
                }
            }, _fee, _memo, _funds);
        };
        this.extension = async ({ msg }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                extension: {
                    msg
                }
            }, _fee, _memo, _funds);
        };
        this.updateOwnership = async (action, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_ownership: action
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.transferNft = this.transferNft.bind(this);
        this.sendNft = this.sendNft.bind(this);
        this.approve = this.approve.bind(this);
        this.revoke = this.revoke.bind(this);
        this.approveAll = this.approveAll.bind(this);
        this.revokeAll = this.revokeAll.bind(this);
        this.mint = this.mint.bind(this);
        this.burn = this.burn.bind(this);
        this.extension = this.extension.bind(this);
        this.updateOwnership = this.updateOwnership.bind(this);
    }
}
exports.Cw721BaseClient = Cw721BaseClient;
//# sourceMappingURL=Cw721Base.client.js.map